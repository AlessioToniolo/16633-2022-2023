/*
    public void checkDPads(){
        if(gamepad1.dpad_up&&gamepad1.dpad_up!=prevDUp){
            robot.drive.followTrajectoryAsync(robot.drive.trajectoryBuilder(robot.drive.getPoseEstimate())
                    .forward(24)
                    .build());
        }
        prevDUp= gamepad1.dpad_up;

        if(gamepad1.dpad_down&&gamepad1.dpad_down!=prevDDown){
            robot.drive.followTrajectoryAsync(robot.drive.trajectoryBuilder(robot.drive.getPoseEstimate())
                    .back(24)
                    .build());
        }
        prevDDown= gamepad1.dpad_down;

        if(gamepad1.dpad_right&&gamepad1.dpad_right!=prevDRight){
            robot.drive.followTrajectoryAsync(robot.drive.trajectoryBuilder(robot.drive.getPoseEstimate())
                    .strafeRight(24)
                    .build());
        }
        prevDRight= gamepad1.dpad_right;

        if(gamepad1.dpad_left&&gamepad1.dpad_left!=prevDLeft){
            robot.drive.followTrajectoryAsync(robot.drive.trajectoryBuilder(robot.drive.getPoseEstimate())
                    .strafeLeft(24)
                    .build());
        }
        prevDLeft= gamepad1.dpad_left;

    }
     */

     public void checkDriveRR() {
             // Read pose
             Pose2d poseEstimate = robot.drive.getPoseEstimate();

             // Create a vector from the gamepad x/y inputs
             // Then, rotate that vector by the inverse of that heading
             Vector2d input = new Vector2d(
                 -gamepad1.left_stick_y,
                 -gamepad1.left_stick_x
             ).rotated(-poseEstimate.getHeading());

             // Pass in the rotated input + right stick value for rotation
             // Rotation is not part of the rotated input thus must be passed in separately
             robot.drive.setWeightedDrivePower(
                 new Pose2d(
                         input.getX(),
                         input.getY(),
                         -gamepad1.right_stick_x
                 )
             );

             telemetry.addData("heading", /*poseEstimate.getHeading()*/robot.drive.getRawExternalHeading());
         }

         public void lockedFieldCentricDrive(){




                 double leftStickX;
                 double leftStickY;
                 double rightStickX;

                 // Strafer Mode
                 leftStickX = gamepad1.left_stick_x;
                 leftStickY = -gamepad1.left_stick_y;//inversed to match x y plane coords
                 /**
                  * This is the left stick
                  *        -1
                  *        \
                  *        \
                  -1_______\________ +1 so -gamepad1.leftStickY turns it into the coordinate plane
                  *        \
                  *        \
                  *
                  *        +1
                  */
                 rightStickX = gamepad1.right_stick_x;

                 //converting gamepad turn input into a speed for the motors to interpet
                 if(rightStickX<0)rightStickX=-speed;
                 else if(rightStickX>0)rightStickX=speed;

                 telemetry.addLine("DRIVE MODE: LOCKED FIELDCENTRIC");



                 //get degree of the robot from the imu
                 robotDegree = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES).firstAngle;
                 telemetry.addLine("Robot Degree: "+robotDegree);

                 //LOCKING SYSTEM: converts gamepad input into either up left down or right
                 boolean driveY = Math.abs(leftStickY)>Math.abs(leftStickX)?true:false;//determine whether we want to move on x or y axis
                     if (driveY) {
                         leftStickX = 0;
                         gamepadDegree = leftStickY > 0 ? 90 : 270;
                     } else {
                         leftStickY = 0;
                         gamepadDegree = leftStickX > 0 ? 0 : 180;
                     }

                     //DISABLED: This would be for normal fieldcentric
                 //compute degree of joystick using atan of y/x
                 //gamepadDegree = Math.atan2(leftStickY,leftStickX); normal way of doing it


                 telemetry.addLine("Gamepad Degree: "+gamepadDegree);


                 double turnDegrees = gamepadDegree-robotDegree;//determine what heading relative to the robot we want to drive


                 //x and y are doubles in the range [-1,1] which are just the cos and sin of the angle you want to drive
                 double x = round(Math.cos(Math.toRadians(turnDegrees)))*speed;//find x and y using cos and sin and then multiply them by the speed
                 double y = round(Math.sin(Math.toRadians(turnDegrees)))*speed;

                 if(Math.abs(leftStickY) == 0 &&Math.abs(leftStickX)==0 ){//however if there is no joystick movement x and y are 0
                     x=0;
                     y=0;
                 }
                 rightStickX*=speed;//Experimental
                 //calculate power; copied from the Nebomusc Macanum Quad with changes to match our motor directions
                 double leftRearPower = y - x + rightStickX;
                 double leftFrontPower = y + x + rightStickX;
                 double rightRearPower = y + x - rightStickX;
                 double rightFrontPower = y - x - rightStickX;

                 telemetry.addLine("");
                 telemetry.addLine("DRIVE DATA");
                 telemetry.addLine("______________________________________");
                 telemetry.addData("leftRear", leftRearPower);
                 telemetry.addData("leftFront", leftFrontPower);
                 telemetry.addData("rightRear", rightRearPower);
                 telemetry.addData("rightFront", rightFrontPower);


                     robot.drive.leftFront.setPower(leftFrontPower);
                     robot.drive.leftRear.setPower(leftRearPower);
                     robot.drive.rightFront.setPower(rightFrontPower);
                     robot.drive.rightRear.setPower(rightRearPower);


             }
             public void checkDrive(){

                     double leftX;
                     double leftY;
                     double rightX;

                     // Strafer Mode
                     leftX = gamepad1.left_stick_x;
                     leftY = -1*gamepad1.left_stick_y;
                     rightX = gamepad1.right_stick_x;

                     double leftRearPower = leftY - leftX - rightX;
                     double leftFrontPower = leftY + leftX - rightX;
                     double rightRearPower = leftY + leftX + rightX;
                     double rightFrontPower = leftY - leftX + rightX;
                     telemetry.addLine("DRIVE MODE: NORMAL");

                     telemetry.addLine("");
                     telemetry.addLine("DRIVE DATA");
                     telemetry.addLine("______________________________________");
                     telemetry.addData("leftRear", leftRearPower);
                     telemetry.addData("leftFront", leftFrontPower);
                     telemetry.addData("rightRear", rightRearPower);
                     telemetry.addData("rightFront", rightFrontPower);

                     robot.drive.leftFront.setPower(leftFrontPower*speed);
                     robot.drive.leftRear.setPower(leftRearPower*speed);
                     robot.drive.rightFront.setPower(rightFrontPower*speed);
                     robot.drive.rightRear.setPower(rightRearPower*speed);
                 }
                 TESTING CODE
                 /**if(gamepad1.y) {
                             robot.drive.leftFront.setPower(leftFrontPower);
                             robot.drive.leftRear.setPower(leftRearPower);
                             robot.drive.rightFront.setPower(rightFrontPower);
                             robot.drive.rightRear.setPower(rightRearPower);
                         }else{
                             robot.drive.leftFront.setPower(0);
                             robot.drive.leftRear.setPower(0);
                             robot.drive.rightFront.setPower(0);
                             robot.drive.rightRear.setPower(0);
                         }**/